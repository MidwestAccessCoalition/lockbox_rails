class SupportRequest < ApplicationRecord
  belongs_to :lockbox_partner
  belongs_to :user
  has_one :lockbox_action
  accepts_nested_attributes_for :lockbox_action
  has_many :lockbox_transactions, through: :lockbox_action
  accepts_nested_attributes_for :lockbox_transactions, reject_if: :all_blank,
    allow_destroy: true
  has_many :notes, as: :notable

  delegate :name, to: :lockbox_partner

  validates :client_ref_id, presence: true
  validates :name_or_alias, presence: true
  validates :user, presence: true
  validates :lockbox_partner, presence: true

  # Sometimes the UUID will already have been created elsewhere, and sometimes not
  before_validation :populate_client_ref_id
  # Do not save possible PII to the versions table
  has_paper_trail ignore: [:name_or_alias]

  # for grepability:
  # scope :pending
  # scope :completed
  # scope :canceled
  LockboxAction::STATUSES.each do |status|
    scope status, -> { joins(:lockbox_action).where("lockbox_actions.status": status) }
    scope "#{status}_for_partner", ->(lockbox_partner_id:) { joins(:lockbox_action).where(lockbox_partner_id: lockbox_partner_id, "lockbox_actions.status": status) }
  end

  REDACTED = "[redacted]".freeze
  REDACT_AFTER_DAYS = 90

  scope :needs_redaction, -> do
    joins(:lockbox_action)
      .where(
        support_requests: { redacted: false },
        lockbox_actions: { status: LockboxAction::CLOSED_STATUSES }
      )
      .where("lockbox_actions.closed_at <= ?", REDACT_AFTER_DAYS.days.ago)
  end

  def all_support_requests_for_partner
    @all_support_requests_for_partner ||= self
      .class
      .where(lockbox_partner: lockbox_partner)
      .sort { |x, y| y.eff_date <=> x.eff_date }
  end

  def amount
    lockbox_action.amount
  end

  def editable_status?
    lockbox_action.editable_status?
  end

  def eff_date
    lockbox_action.eff_date
  end

  def date_submitted
    created_at.to_date
  end

  alias_method :pickup_date, :eff_date

  def most_recent_note
    @most_recent_note ||= notes.last
  end

  def newer_request_by_partner
    return nil unless newer_idx
    all_support_requests_for_partner[newer_idx]
  end

  def older_request_by_partner
    return nil unless older_idx
    all_support_requests_for_partner[older_idx]
  end

  def status
    lockbox_action.status
  end

  def action_type
    lockbox_action.action_type
  end

  def status_options(include_current: false)
    if include_current
      LockboxAction::STATUSES
    else
      LockboxAction::STATUSES - [status]
    end
  end

  def record_creation
    note_text = "Support request generated by #{user.name}"
    notes.create(text: note_text, notable_action: "create")
  end

  def record_creation_async
    NotesWorker.perform_async(id)
  end

  def redact!
    ActiveRecord::Base.transaction do
      notes.may_contain_pii.each(&:redact!)
      update!(name_or_alias: REDACTED, redacted: true)
    end
  end

  def redact_async
    SupportRequestRedactionWorker.perform_async(id)
  end

  def self.to_csv
    attributes = ActiveSupport::OrderedHash.new
    attributes[:action_type] = 'Action type'
    attributes[:status] = 'Status'
    attributes[:name] = 'Partner'
    attributes[:client_ref_id] = 'Client Reference ID'
    attributes[:date_submitted] = 'Date submitted'
    attributes[:eff_date] = 'Date of expense'

    CSV.generate(headers: true) do |csv|
      csv << attributes.values

      SupportRequest.all.each do |support_request|
        csv << attributes.keys.map { |attr| support_request.send(attr) }
      end
    end
  end

  private

  def index_in_support_requests_collection
    all_support_requests_for_partner.find_index self
  end

  def newer_idx
    idx = index_in_support_requests_collection
    @newer_idx ||= idx > 0 ? idx - 1 : nil
  end

  def older_idx
    idx = index_in_support_requests_collection
    max_idx = all_support_requests_for_partner.count - 1
    @older_idx ||= idx < max_idx ? idx + 1 : nil
  end

  def populate_client_ref_id
    self.client_ref_id = SecureRandom.uuid if client_ref_id.blank?
  end
end
