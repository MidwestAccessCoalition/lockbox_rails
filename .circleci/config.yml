# Ruby CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1
commands:
  bundle:
    description: Install Ruby dependencies
    steps:
      - run:
          name: Install bundler
          command: gem install bundler -v 2.1.4 && bundle config set path 'vendor/bundle'
      - restore_cache:
          name: Restore bundler cache
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies- # fallback to using the latest cache if no exact match is found
      - run:
          name: Install Ruby dependencies
          command: bundle install --jobs=4 --retry=3
      - save_cache:
          name: Save bundler cache
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
  yarn:
    description: Install Javascript dependencies
    steps:
      - restore_cache:
          name: Restore yarn cache
          keys:
            - cache-yarn-{{ checksum "yarn.lock" }}
            - cache-yarn-
      - run:
          name: Install and compile JS dependencies
          command: |
            yarn install --cache-folder ~/.yarn-cache &&
            NODE_ENV=test bundle exec rails webpacker:compile
      - save_cache:
          name: Save yarn cache
          paths:
            - ~/.yarn-cache
          key: cache-yarn-{{ checksum "yarn.lock" }}

job_defaults: &defaults
  docker:
    - image: circleci/ruby:2.6.5-node-browsers
      environment:
        PGHOST: 127.0.0.1
        PGUSER: lockbox_rails_test
        RAILS_ENV: test
        NODE_ENV: test
    - image: postgres:11.2
      environment:
        POSTGRES_USER: lockbox_rails_test
        POSTGRES_DB: lockbox_rails_test
        POSTGRES_PASSWORD: ""
        RAILS_ENV: test
        NODE_ENV: test
  working_directory: ~/repo

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - bundle
      - yarn
      - run:
          name: Set up database
          command: bundle exec rake db:create db:schema:load

  test:
    <<: *defaults
    parameters:
      bundler-audit-ignore:
        description: Known vulnerabilities to ignore
        type: string
        # This list is a string, but since YAML `>` converts single new lines into single spaces,
        # the CVEs can be listed here one per line rather than as one long string for better reaabaility.
        default: >
          CVE-2017-1002201
          CVE-2020-15169
    steps:
      # Run security scans
      - run:
          name: Security scans
          command: >
            mkdir -p tmp/security-scans &&
            bundle exec brakeman -A --no-exit-on-warn -o tmp/security-scans/brakeman.log &&
            bundle exec bundle-audit check --update <<# parameters.bundler-audit-ignore >>
            --ignore << parameters.bundler-audit-ignore >> <</ parameters.bundler-audit-ignore >>
            > tmp/security-scans/bundler-audit.log &&
            echo "DangerJS scan not yet implemented" > tmp/security-scans/dangerjs.log
      # Run tests
      - run:
          name: Run RSpec test suite
          command: |
            mkdir tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"
            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
      # Collect reports
      - store_test_results:
          path: tmp/test-results
      - store_artifacts:
          name: Store security scan results
          path: tmp/security-scans
          destination: security-scans
      - store_artifacts:
          name: Store test results
          path: tmp/test-results
          destination: test-results
      - store_artifacts:
          name: Store screenshots
          path: tmp/screenshots
          destination: screenshots
      - store_artifacts:
          name: Store coverage
          path: coverage

  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku (Staging)
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git trunk:master

workflows:
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      # - deploy:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: trunk
